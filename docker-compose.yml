version: "3.7"

services:
  web-back:
    container_name: go-backend
    # env_file: ./backend/web-back/.env
    build: ./backend/web-back/.
    volumes:
      - ./backend/web-back:/code/
      - static_volume:/code/staticfiles
    stdin_open: true
    tty: true
    networks:
      - backend_network
    depends_on:
      - db
    ports:
      - "8000:8000"
    command: sh -c 'go mod tidy && air'

  backend-server:
    container_name: nginx_back
    build:
      context: ./backend/nginx/.
      dockerfile: Dockerfile.dev
    volumes:
      - static_volume:/code/staticfiles
    ports:
      - "8080:80"
    depends_on:
      - web-back
    networks:
      - backend_network

  db:
    container_name: mysql_container
    image: mysql:8.0.36
    platform: linux/amd64
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      TZ: "Asia/Tokyo"
    volumes:
      - ./mysql/data/:/var/lib/mysql
      - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf
      - ./mysql/sql:/docker-entrypoint-initdb.d
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    networks:
      - backend_network
  
  phpmyadmin:
    image: phpmyadmin
    container_name: phpmyadmin_container
    depends_on:
      - db
    environment:
      - PMA_ARBIRITY=1
      - PMA_HOSTS=db
      - PMA_USER=${DB_USER}
      - PMA_PASSWORD=${DB_PASSWORD}
    ports:
      - "3300:80"
    volumes:
      - ./phpmyadmin/sessions:/sessions
    networks:
      - backend_network

  web-front:
    image: node
    # build:
    #   context: ./frontend/web-front/.
    #   dockerfile: Dockerfile.dev
    volumes:
      - ./frontend/web-front:/home/app/frontend
    ports:
      - "3000:3000"
    working_dir: /home/app/frontend
    command:
      [
        bash,
        -c,
        yarn upgrade --no-progress --network-timeout 1000000 && yarn run dev,
      ]
    networks:
      - frontend_network
  frontend-server:
    container_name: nginx_frontend
    build:
      context: ./frontend/nginx/.
      dockerfile: Dockerfile.dev
    ports:
      - "80:80"
    depends_on:
      - web-front
    networks:
      - frontend_network

networks:
  backend_network:
    driver: bridge
  frontend_network:
    driver: bridge
volumes:
  static_volume: